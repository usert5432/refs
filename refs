#!/usr/bin/env bash

REFS_DIR="${REFS_DIR:-${HOME}/.refs}"
EDITOR="${EDITOR:-vi}"
PAGER="${PAGER:-less}"

ESCAPE_CHAR=$'\033'
COLOR_NC="${ESCAPE_CHAR}[0m"
COLOR_BOLD_YELLOW="${ESCAPE_CHAR}[1;33m"

die ()
{
    echo "ERROR: ${*}"
    exit 1
}

usage()
{
    cat <<EOF
Usage: refs [OPTION...] COMMAND [ARG...]

Quick notes management app.

OPTIONS:
  -h, --help                        print this help message
  -d, --dir=DIR                     set note directory to DIR

COMMAND:
  add                               Adds new note
  cat NOTE                          Print NOTE content
  copy NOTE DST                     Copy NOTE to destination DST
  count                             Count number of notes saved
  edit NOTE                         Start editing NOTE
  grep GREP_ARGS                    Run 'grep' in the notes directory
  less NOTE                         View note in a pager
  list                              List notes
  move NOTE DST                     Move NOTE to destination DST
  remove NOTE                       Remove NOTE

For all commands NOTE can either be a note file name or its number returned
by either 'list' or 'grep' commands.
EOF

    if [ $# -gt 0 ]
    then
        die "${*}"
    else
        exit 0
    fi
}

collect_notes ()
{
    local note_dir="${1}"
    _collect_notes_result=( )

    while IFS= read -d '' -r fname
    do
        _collect_notes_result+=( "${fname}" )
    done < <(
        find "${note_dir}" -mindepth 1 -maxdepth 1 -type f -printf '%P\0' \
            | sort -z
    )
}

add_note ()
{
    local note_dir="${1}"
    local editor="${2}"

    mkdir -p "${note_dir}" \
        || die "Failed to create note directory '${note_dir}'"

    local note_file
    note_file="$(
        mktemp --tmpdir="${note_dir}" "$(date '+%Y-%m-%d_%H:%M:%S').XXXXXXXXXX"
    )"

    # shellcheck disable=SC2181
    [[ $? -ne 0 ]] && die "Failed to create note file"

    ${editor} -- "${note_file}"
}

get_file_header ()
{
    local path="${1}"
    sed -n '/./{p;q}' "${path}"
}

list_notes ()
{
    local note_dir="${1}"
    local idx=0
    local header

    collect_notes "${note_dir}"
    local notes=( "${_collect_notes_result[@]}" )

    for fname in "${notes[@]}"
    do
        idx=$(( idx + 1 ))
        header="$(get_file_header "${note_dir}/${fname}")"

        echo "[ ${idx} ] : ${fname} : ${header}"
    done
}

get_note_by_number ()
{
    local note_dir="${1}"
    local number="${2}"
    _get_note_by_number_result=""

    collect_notes "${note_dir}"
    local notes=( "${_collect_notes_result[@]}" )

    [[ ${number} -eq 0 ]] && die "Refs numberation starts with 1"

    if [[ ${number} -gt ${#notes[@]} ]]
    then
        die "Note number ${number} is greater than the number of notes " \
            "${#notes[@]}"
    fi

    local index=$(( number - 1 ))

    _get_note_by_number_result="${notes[${index}]}"
}

resolve_note_name ()
{
    local note_dir="${1}"
    local name="${2}"
    _resolve_note_name_result=""

    [[ -z "${name}" ]] && die "Note name is not specified"

    if [[ "${name}" =~ ^[[:digit:]]+$ ]]
    then
        get_note_by_number "${note_dir}" "${name}"
        _resolve_note_name_result="${_get_note_by_number_result}"
        return
    fi

    if ! [[ -e "${note_dir}/${name}" ]]
    then
        die "Note '${name}' is not found in '${note_dir}'"
    fi

    _resolve_note_name_result="${name}"
}

cat_note ()
{
    local note_dir="${1}"
    local name="${2}"

    resolve_note_name "${note_dir}" "${name}"
    name="${_resolve_note_name_result}"

    local path="${note_dir}/${name}"
    echo ">>> ${path} : "
    exec cat -- "${path}"
}

copy_or_move_note ()
{
    local note_dir="${1}"
    local move="${2}"
    local name="${3}"
    local dst="${4}"

    [[ -z "${dst}" ]] && die "Copy/Move require destination: copy/move SRC DST"

    resolve_note_name "${note_dir}" "${name}"
    name="${_resolve_note_name_result}"

    local path="${note_dir}/${name}"
    if [[ "${move}" -eq 1 ]]
    then
        echo "Moving '${path}' to '${dst}'"
        exec mv -- "${path}" "${dst}"
    else
        echo "Copying '${path}' to '${dst}'"
        exec cp -- "${path}" "${dst}"
    fi
}

edit_note ()
{
    local note_dir="${1}"
    local name="${2}"
    local editor="${3}"

    resolve_note_name "${note_dir}" "${name}"
    name="${_resolve_note_name_result}"

    local path="${note_dir}/${name}"
    ${editor} -- "${path}"
}

count_notes ()
{
    local note_dir="${1}"
    collect_notes "${note_dir}"

    echo "${#_collect_notes_result[@]}"
}

is_interactive ()
{
    # check if fd=1 (stdout) is a terminal
    [ -t 1 ]
}

grep_notes ()
{
    local note_dir="${1}"
    shift
    local grep_args=( "${@}" )

    local note_prefix=""
    local note_suffix=""

    if is_interactive
    then
        grep_args+=( --color=always )
        note_prefix="${COLOR_BOLD_YELLOW}"
        # reset
        note_suffix="${COLOR_NC}"
    fi

    collect_notes "${note_dir}"
    local notes=( "${_collect_notes_result[@]}" )

    local idx=0
    for fname in "${notes[@]}"
    do
        idx=$(( idx + 1 ))

        result="$(grep "${grep_args[@]}" "${note_dir}/${fname}")"
        [[ -z "${result}" ]] && continue

        cat << EOF
${note_prefix}[ ${idx} ] : ${fname}${note_suffix}
${result}

EOF
    done

}

remove_note ()
{
    local note_dir="${1}"
    local name="${2}"

    resolve_note_name "${note_dir}" "${name}"
    name="${_resolve_note_name_result}"

    local path="${note_dir}/${name}"
    local header
    local response

    header="$(get_file_header "${path}")"
    read -p "Remove note '${path} : ${header}'. Confirm [y/N]? " -r response

    if [[ "${response}" =~ ^[yY]$ ]]
    then
        echo "Removing note '${path}'"
        exec rm -- "${path}"
    else
        echo "Answered: '${response}'. Aborting..."
    fi
}

main ()
{
    local cmd="${1}"
    local dir="${2}"
    shift 2
    local args=( "${@}" )

    [[ -z "${dir}" ]] && dir="${REFS_DIR}"

    dir="$(readlink -f "${dir}")"
    dir="${dir%/}"

    case "${cmd}" in
        add)
            add_note "${dir}" "${EDITOR}"
            ;;
        cat)
            cat_note "${dir}" "${args[@]}"
            ;;
        count)
            count_notes "${dir}"
            ;;
        copy|cp)
            copy_or_move_note "${dir}" 0 "${args[@]}"
            ;;
        edit)
            edit_note "${dir}" "${args[0]}" "${EDITOR}"
            ;;
        grep)
            grep_notes "${dir}" "${args[@]}"
            ;;
        less)
            cat_note "${dir}" "${args[@]}" | "${PAGER}"
            ;;
        list|ls)
            list_notes "${dir}"
            ;;
        move|mv)
            copy_or_move_note "${dir}" 1 "${args[@]}"
            ;;
        remove|rm)
            remove_note "${dir}" "${args[@]}"
            ;;
        *)
            usage "Unknown command ${1}"
    esac
}

cmd=
dir=
args=( )

while [ $# -gt 0 ]
do
    case "$1" in
        -h|--help|help)
            usage
            ;;
        -d|--dir)
            if [[ -n "${2}" ]]
            then
                dir="${2}"
                shift
            else
                usage "No DIR specified after $1"
            fi
            ;;
        add|cat|count|copy|cp|edit|grep|less|ls|list|move|mv|remove|rm)
            cmd="${1}"
            shift
            break
            ;;
        *)
            usage "Unknown argument '${1}'"
            ;;
    esac

    shift
done

args=( "${@}" )

[[ -z "${cmd}" ]] && usage "No command specified"

main "${cmd}" "${dir}" "${args[@]}"

